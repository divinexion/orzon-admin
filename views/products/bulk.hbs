{{#section 'style'}}
<style>
  .form-section {
    background: white;
    border-radius: 15px;
    padding: 2rem;
    margin-bottom: 1.5rem;
    box-shadow: 0 2px 10px rgba(0,0,0,0.08);
  }
  .section-title {
    color: var(--primary-color);
    font-weight: 600;
    margin-bottom: 1.5rem;
    padding-bottom: 0.75rem;
    border-bottom: 2px solid #f0f0f0;
  }
  .form-label {
    font-weight: 500;
    color: #495057;
    margin-bottom: 0.5rem;
  }
  .form-control, .form-select {
    border-radius: 8px;
    border: 1px solid #e0e0e0;
    padding: 0.75rem;
    transition: all 0.3s;
  }
  .form-control:focus, .form-select:focus {
    border-color: var(--primary-color);
    box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.1);
  }
  .input-icon {
    position: absolute;
    left: 12px;
    top: 50%;
    transform: translateY(-50%);
    color: #999;
  }
  .input-with-icon {
    padding-left: 40px;
  }
  .preview-area {
    background: #f8f9fa;
    border: 1px solid #e9ecef;
    border-radius: 8px;
    padding: 1rem;
    font-family: monospace;
    font-size: 0.9rem;
  }
  .alert-info {
    background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
    border: 1px solid #2196f3;
    color: #1976d2;
  }
</style>
{{/section}}

<div class="page-header mb-4">
  <div class="row align-items-center">
    <div class="col">
      <h2 class="mb-0">Bulk Add Products</h2>
      <nav aria-label="breadcrumb">
        <ol class="breadcrumb mb-0">
          <li class="breadcrumb-item"><a href="/products">Products</a></li>
          <li class="breadcrumb-item active">Bulk Add</li>
        </ol>
      </nav>
    </div>
  </div>
</div>

<form method="post" action="/products/bulk" id="bulkForm">
  <div class="row">
    <div class="col-lg-8">
      <div class="form-section">
        <h5 class="section-title"><i class="bi bi-boxes me-2"></i> Bulk Product Information</h5>
        <div class="row g-3">
          <div class="col-md-6">
            <label class="form-label">Serial Number Prefix <span class="text-danger">*</span></label>
            <div class="position-relative">
              <i class="bi bi-upc-scan input-icon"></i>
              <input 
                required 
                type="text" 
                class="form-control input-with-icon" 
                name="serialPrefix" 
                id="serialPrefix" 
                value="ORZ20250912" 
                placeholder="Enter serial prefix (e.g., ORZ20250912)" 
              />
            </div>
            <small class="text-muted">Common prefix for all products in this batch</small>
          </div>
          <div class="col-md-3">
            <label class="form-label">Start Number <span class="text-danger">*</span></label>
            <input 
              required 
              type="number" 
              class="form-control" 
              name="startNumber" 
              id="startNumber" 
              min="1" 
              max="99999" 
              placeholder="00001" 
            />
            <small class="text-muted">Starting serial number</small>
          </div>
          <div class="col-md-3">
            <label class="form-label">End Number <span class="text-danger">*</span></label>
            <input 
              required 
              type="number" 
              class="form-control" 
              name="endNumber" 
              id="endNumber" 
              min="1" 
              max="99999" 
              placeholder="01000" 
            />
            <small class="text-muted">Ending serial number</small>
          </div>
          <div class="col-md-6">
            <label class="form-label">Capacity <span class="text-danger">*</span></label>
            <select required class="form-select" name="typeCapacity" id="typeCapacity">
              <option value="">Select capacity</option>
              {{#each capacities}}
                <option value="{{this}}">{{formatCapacity this}}</option>
              {{/each}}
            </select>
          </div>
          <div class="col-md-6">
            <label class="form-label">Source (Supplier) <span class="text-danger">*</span></label>
            <div class="position-relative">
              <i class="bi bi-building input-icon"></i>
              <input 
                required 
                type="text" 
                class="form-control input-with-icon" 
                name="source" 
                id="source" 
                placeholder="e.g., XYZ Electronics, ABC Supplier" 
              />
            </div>
            <small class="text-muted">Where these products were purchased from</small>
          </div>
          <div class="col-md-6">
            <label class="form-label">Add Date</label>
            <input type="date" class="form-control" name="addDate" id="addDate" />
            <small class="text-muted">Defaults to today if not specified</small>
          </div>
          <div class="col-12">
            <label class="form-label">Description (Optional)</label>
            <textarea 
              class="form-control" 
              name="description" 
              rows="3" 
              placeholder="Additional description for this batch"
            ></textarea>
          </div>
        </div>
      </div>

      <!-- Preview Section -->
      <div class="form-section">
        <h5 class="section-title"><i class="bi bi-eye me-2"></i> Preview</h5>
        <div class="alert alert-info">
          <i class="bi bi-info-circle me-2"></i>
          <strong>Product Count:</strong> <span id="productCount">0</span> products will be created
        </div>
        <div class="preview-area">
          <strong>Sample Serial Numbers:</strong>
          <div id="serialPreview">
            Enter values above to see preview...
          </div>
        </div>
      </div>
    </div>

    <div class="col-lg-4">
      <div class="form-section">
        <h5 class="section-title"><i class="bi bi-info-circle me-2"></i> Actions</h5>
        <div class="d-grid gap-2">
          <button class="btn btn-primary" type="submit" id="submitBtn">
            <span class="btn-text">
              <i class="bi bi-plus-circle me-2"></i>
              Create Bulk Products
            </span>
            <span class="btn-loading" style="display: none;">
              <span class="spinner-border spinner-border-sm me-2" role="status"></span>
              Processing...
            </span>
          </button>
          <a class="btn btn-outline-secondary" href="/products">
            <i class="bi bi-x-circle me-2"></i> Cancel
          </a>
        </div>
      </div>

      <div class="form-section">
        <h5 class="section-title"><i class="bi bi-lightbulb me-2"></i> Tips</h5>
        <ul class="small text-muted">
          <li>Maximum 10,000 products per batch</li>
          <li>Serial numbers must be unique</li>
          <li>Existing serials will be skipped with warnings</li>
          <li>Source field tracks your supplier</li>
          <li>Product names auto-generate from capacity + serial</li>
          <li>Process may take time for large batches</li>
        </ul>
      </div>

      <div class="form-section">
        <h5 class="section-title"><i class="bi bi-graph-up me-2"></i> Current Stats</h5>
        <div class="small">
          <div class="d-flex justify-content-between mb-1">
            <span>Total Products:</span>
            <span class="fw-bold">Loading...</span>
          </div>
          <div class="d-flex justify-content-between mb-1">
            <span>Available Serials:</span>
            <span class="fw-bold text-success">∞</span>
          </div>
        </div>
      </div>
    </div>
  </div>
</form>

{{#section 'script'}}
<script>
// Set default add date to today
document.addEventListener('DOMContentLoaded', function() {
  const addDateField = document.getElementById('addDate');
  if (addDateField && !addDateField.value) {
    const today = new Date();
    const todayString = today.getFullYear() + '-' + 
      String(today.getMonth() + 1).padStart(2, '0') + '-' + 
      String(today.getDate()).padStart(2, '0');
    addDateField.value = todayString;
  }
});

// Update preview when values change
function updatePreview() {
  const prefix = document.getElementById('serialPrefix').value.trim();
  const start = parseInt(document.getElementById('startNumber').value) || 0;
  const end = parseInt(document.getElementById('endNumber').value) || 0;
  const capacity = document.getElementById('typeCapacity').value;
  
  const productCount = Math.max(0, end - start + 1);
  document.getElementById('productCount').textContent = productCount.toLocaleString();
  
  if (prefix && start > 0 && end >= start) {
    const samples = [];
    
    // Show first few examples
    for (let i = start; i <= Math.min(start + 2, end); i++) {
      const paddedNumber = i.toString().padStart(5, '0');
      const serialNumber = `${prefix}${paddedNumber}`;
      const capacityDisplay = capacity >= 1024 ? `${capacity/1024}TB` : `${capacity}GB`;
      const productName = capacity ? `Storage Disk ${capacityDisplay} - ${serialNumber}` : `Product - ${serialNumber}`;
      samples.push(`${serialNumber} → "${productName}"`);
    }
    
    // Show ellipsis if more than 3
    if (end > start + 2) {
      samples.push('...');
      
      // Show last example
      const paddedNumber = end.toString().padStart(5, '0');
      const serialNumber = `${prefix}${paddedNumber}`;
      const capacityDisplay = capacity >= 1024 ? `${capacity/1024}TB` : `${capacity}GB`;
      const productName = capacity ? `Storage Disk ${capacityDisplay} - ${serialNumber}` : `Product - ${serialNumber}`;
      samples.push(`${serialNumber} → "${productName}"`);
    }
    
    document.getElementById('serialPreview').innerHTML = samples.join('<br>');
  } else {
    document.getElementById('serialPreview').textContent = 'Enter values above to see preview...';
  }
}

// Add event listeners for preview updates
document.getElementById('serialPrefix').addEventListener('input', updatePreview);
document.getElementById('startNumber').addEventListener('input', updatePreview);
document.getElementById('endNumber').addEventListener('input', updatePreview);
document.getElementById('typeCapacity').addEventListener('change', updatePreview);

// Form validation
document.getElementById('bulkForm').addEventListener('submit', function(e) {
  e.preventDefault();
  
  // Reset previous validation states
  document.querySelectorAll('.is-invalid').forEach(el => {
    el.classList.remove('is-invalid');
  });
  document.querySelectorAll('.invalid-feedback').forEach(el => {
    el.remove();
  });
  
  let isValid = true;
  const errors = [];
  
  // Validate required fields
  const prefix = document.getElementById('serialPrefix').value.trim();
  const start = parseInt(document.getElementById('startNumber').value);
  const end = parseInt(document.getElementById('endNumber').value);
  const capacity = document.getElementById('typeCapacity').value;
  const source = document.getElementById('source').value.trim();
  
  if (!prefix) {
    showError(document.getElementById('serialPrefix'), 'Serial prefix is required');
    errors.push('Serial prefix is required');
    isValid = false;
  }
  
  if (!start || start < 1) {
    showError(document.getElementById('startNumber'), 'Start number must be a positive integer');
    errors.push('Invalid start number');
    isValid = false;
  }
  
  if (!end || end < 1) {
    showError(document.getElementById('endNumber'), 'End number must be a positive integer');
    errors.push('Invalid end number');
    isValid = false;
  }
  
  if (start && end && start > end) {
    showError(document.getElementById('endNumber'), 'End number must be greater than or equal to start number');
    errors.push('Invalid number range');
    isValid = false;
  }
  
  if (start && end && (end - start + 1) > 10000) {
    showError(document.getElementById('endNumber'), 'Cannot create more than 10,000 products at once');
    errors.push('Too many products requested');
    isValid = false;
  }
  
  if (!capacity) {
    showError(document.getElementById('typeCapacity'), 'Please select a capacity');
    errors.push('Capacity is required');
    isValid = false;
  }
  
  if (!source) {
    showError(document.getElementById('source'), 'Source/supplier is required');
    errors.push('Source is required');
    isValid = false;
  }
  
  if (!isValid) {
    // Show error toast
    showErrorToast(errors[0]);
    
    // Scroll to first error
    const firstError = document.querySelector('.is-invalid');
    if (firstError) {
      firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
      firstError.focus();
    }
    return false;
  }
  
  // Show confirmation dialog
  const productCount = end - start + 1;
  if (productCount > 100) {
    if (!confirm(`You are about to create ${productCount.toLocaleString()} products. This may take several minutes. Continue?`)) {
      return false;
    }
  }
  
  // Show loading and submit
  const submitBtn = document.getElementById('submitBtn');
  if (submitBtn) {
    submitBtn.disabled = true;
    submitBtn.querySelector('.btn-text').style.display = 'none';
    submitBtn.querySelector('.btn-loading').style.display = 'inline-block';
  }
  
  // Submit the form
  setTimeout(() => {
    this.submit();
  }, 100);
});

// Helper function to show field error
function showError(field, message) {
  field.classList.add('is-invalid');
  const feedback = document.createElement('div');
  feedback.className = 'invalid-feedback';
  feedback.textContent = message;
  
  // Insert feedback after the field or its parent group
  const parent = field.closest('.position-relative') || field.parentElement;
  parent.appendChild(feedback);
}

// Helper function to show error toast
function showErrorToast(message) {
  const toastHtml = `
    <div class="toast align-items-center text-white bg-danger border-0 position-fixed top-0 end-0 m-3" role="alert" style="z-index: 9999;">
      <div class="d-flex">
        <div class="toast-body">
          <i class="bi bi-exclamation-circle me-2"></i>
          ${message}
        </div>
        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
      </div>
    </div>
  `;
  
  document.body.insertAdjacentHTML('beforeend', toastHtml);
  const toast = new bootstrap.Toast(document.querySelector('.toast:last-child'));
  toast.show();
  
  // Remove toast after it hides
  setTimeout(() => {
    document.querySelector('.toast:last-child')?.remove();
  }, 5000);
}

// Initial preview update
updatePreview();
</script>
{{/section}}